let map = ["2" :["a", "b", "c"],
           "3": ["d", "e", "f"],
           "4": ["g", "h", "i"],
           "5": ["j", "k", "l"],
           "6": ["m", "n", "o"],
           "7": ["p", "q", "r", "s"],
           "8": ["t", "u", "v"],
           "9": ["w", "x", "y", "z"]]
func letterCombinations(_ digits: String) -> [String] {
    guard digits.count > 0 else { return [String]() }
    
    var res = [String]()
    dfs(digits, 0, "", &res)
    
    return res
}

private func dfs(_ digits: String, _ index: Int, _ list: String, _ res: inout [String]) {
    if index == digits.count {
        res.append(list)
        return
    }
    
    if let strs = map[String(digits[digits.index(digits.startIndex, offsetBy:index)])] {
        for str in strs {
            dfs(digits, index+1, list+str, &res)
        }
    }
}
