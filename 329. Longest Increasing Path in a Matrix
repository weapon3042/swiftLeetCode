    public int longestIncreasingPath(int[][] matrix) {
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
            return 0;
        }
        
        int[][] memo = new int[matrix.length][matrix[0].length];
        for (int i=0; i<memo.length; i++) {
            for (int j=0; j<memo[0].length; j++) {
                memo[i][j] = -1;
            }
        }
        
        int res = Integer.MIN_VALUE;
        
        for (int i=0; i<matrix.length; i++) {
            for (int j=0; j<matrix[0].length; j++) {
                res = Math.max(res, dfs(matrix, memo, i, j));
            }
        }
        
        return res;
    }
    
    int[] dx = {-1, 1, 0, 0};
    int[] dy = {0, 0, -1, 1};
    
    private int dfs(int[][] matrix, int[][] memo, int i, int j) {
        if (memo[i][j] != -1) {
            return memo[i][j];
        }
        
        int res = 1;
        
        for (int k=0; k<4; k++) {
            int x = i + dx[k];
            int y = j + dy[k];
            
            if (valid(matrix, x, y) && matrix[x][y] > matrix[i][j]) {
                res = Math.max(res, dfs(matrix, memo, x, y) + 1);
            }
        }
        
        memo[i][j] = res;
        
        return res;
        
    }
    
    private boolean valid(int[][] arr, int i, int j) {
        return i>=0 && i<arr.length && j>=0 && j <arr[0].length;
    }
