    vector<string> split(const string &s, char delim) {
        stringstream ss(s);
        string item;
        vector<string> tokens;
        while (getline(ss, item, delim)) {
            tokens.push_back(item);
        }
        return tokens;
    }
    vector<int> exclusiveTime(int n, vector<string> &logs) {
        stack<int> ss;
        vector<int> result (n, 0);
        int last_timestamp = 0;
        for (auto str : logs) {
            vector<string> m_logs = split(str, ':');
            int id = stoi(m_logs[0]);
            string status = m_logs[1];
            int timestamp = stoi(m_logs[2]);
            if (status == "start") {
                if (!ss.empty()) {
                    result[ss.top()] += timestamp - last_timestamp;
                }
                ss.push(id);
            } else {
                ++timestamp;
                result[ss.top()] += timestamp - last_timestamp;
                ss.pop();
            }
            last_timestamp = timestamp;
        }
        return result;
    }
