    func findClosestElements(_ arr: [Int], _ k: Int, _ x: Int) -> [Int] {
        guard arr.count > 0, k <= arr.count else { return [Int]() }
        
        var left = 0, right = arr.count-1
        
        var start = -1
        
        while left+1<right {
            let mid = (left+right)/2
            
            if arr[mid] <= x {
                left = mid
            } else {
                right = mid
            }
        }
        
        if arr[left] >= x {
            start = left
        } else {
            start = right
        }
        
        var k = k, res = [Int]()
                    
        right = start
        left = start - 1
        
        while k > 0 {
            if valid(arr, left), valid(arr, right) {
                if x-arr[left] < arr[right]-x {
                    res.insert(arr[left], at:0)
                    left -= 1
                } else if x-arr[left] > arr[right]-x{
                    res.append(arr[right])
                    right += 1
                } else {
                    if arr[left] < arr[right] {
                    res.insert(arr[left], at:0)
                    left -= 1
                    } else {
                    res.append(arr[right])
                    right += 1
                    }
                }
            } else if valid(arr, left) {
                    res.insert(arr[left], at:0)
                    left -= 1
            } else {
                    res.append(arr[right])
                    right += 1
            }
            
            k -= 1
            
        }
        
        return res
    }
    
    private func valid(_ arr: [Int], _ i: Int) -> Bool {
        return i >= 0 && i < arr.count
    }
