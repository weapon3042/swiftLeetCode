func numberOfPatterns(_ m: Int, _ n: Int) -> Int {
    var visited = [Bool](repeating: false, count: 10)
    var jump = [[Int]](repeating:[Int](repeating: 0, count: 10), count: 10)
    
    jump[1][3] = 2
    jump[3][1] = 2
    jump[4][6] = 5
    jump[6][4] = 5
    jump[7][9] = 8
    jump[9][7] = 8
    jump[1][7] = 4
    jump[7][1] = 4
    jump[2][8] = 5
    jump[8][2] = 5
    jump[3][9] = 6
    jump[9][3] = 6
    jump[1][9] = 5
    jump[9][1] = 5
    jump[3][7] = 5
    jump[7][3] = 5
    
    var res = 0, count1 = 0, count2 = 0, count5 = 0


    res += helper(1, 1,  &count1, m, n, jump, &visited) * 4
    res += helper(2, 1,  &count2, m, n, jump, &visited) * 4
    res += helper(5, 1,  &count5, m, n, jump, &visited)
    
    return res
}

private func helper(_ start: Int, _ len: Int, _ res: inout Int, _ m: Int, _ n: Int, _ jump: [[Int]], _ visit: inout [Bool]) -> Int {
    
    var len = len
    if len >= m {
        res += 1
    }
    
    len += 1
    
    if len > n {
        return res
    }
    
    visit[start] = true
    
    for next in 1..<10 {
        let crossed = jump[start][next]
        
        if !visit[next] && (crossed == 0 || visit[crossed]) {
            res = helper(next, len, &res, m, n, jump, &visit)
        }
    }
    
    visit[start] = false
    
    return res
}

