public:
    vector<int> maxSumOfThreeSubarrays(vector<int>& nums, int k) {
        int len=nums.size();
        int i,j;
        const int N=20010;
        int sum[N],left[N],right[N];
        sum[0]=nums[0];
        for (i=1;i<len;i++){
            sum[i]=sum[i-1]+nums[i];
            if (i>=k) sum[i]-=nums[i-k];
        }
        memset(left,0,sizeof(left));
        memset(right,0,sizeof(right));
        left[k-1]=k-1;
        for (i=k;i<len;i++){
            left[i]=(sum[i]>sum[left[i-1]]?i:left[i-1]);
        }
        right[len-1]=len-1;
        for (i=len-2;i>=0;i--){
            right[i]=(sum[i]>=sum[right[i+1]]?i:right[i+1]);
        }
        vector<int >ans;
        int max_sum=0; 
        for (i=0;i<3;i++) ans.push_back(-1);
        for (i=2*k-1;i<=len-k-1;i++){
            if (sum[left[i-k]]+sum[i]+sum[right[i+k]]>max_sum){
                max_sum=sum[left[i-k]]+sum[i]+sum[right[i+k]];
                ans[0]=left[i-k]-k+1;
                ans[1]=i-k+1;
                ans[2]=right[i+k]-k+1;
            }
        }
     return ans;

    }
