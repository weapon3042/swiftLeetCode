class TicTacToe {

    char[][] board;
    
    /** Initialize your data structure here. */
    public TicTacToe(int n) {
        this.board = new char[n][n];
        
    }
    
    /** Player {player} makes a move at ({row}, {col}).
        @param row The row of the board.
        @param col The column of the board.
        @param player The player, can be either 1 or 2.
        @return The current winning condition, can be either:
                0: No one wins.
                1: Player 1 wins.
                2: Player 2 wins. */
    
    int[] dx = {-1, 1, -1, 1};
    int[] dy = {1, -1, -1, 1};
    
    public int move(int row, int col, int player) {
                    char c;
            int n = board.length;

            if (player == 1) {
                c = 'x';
            } else {
                c = 'o';
            }

            board[row][col] = c;

            for (int i = 0; i < n; i++) {
                if (board[row][i] != c) {
                    break;
                }

                if (i == n - 1) {
                    return player;
                }
            }

            for (int i = 0; i < n; i++) {
                if (board[i][col] != c) {
                    break;
                }

                if (i == n - 1) {
                    return player;
                }
            }

            int count = 0;
            int x = row;
            int y = col;

            for (int i = 0; i < n - 1; i++) {
                x = x + dx[0];
                y = y + dy[0];

                if (valid(board, x, y) && board[x][y] == c) {
                    count++;
                }
            }


            x = row;
            y = col;
            for (int i = 0; i < n - 1; i++) {
                x = x + dx[1];
                y = y + dy[1];

                if (valid(board, x, y) && board[x][y] == c) {
                    count++;
                }
            }

            if (count == n - 1) {
                return player;
            }

            count = 0;
            x = row;
            y = col;

            for (int i = 0; i < n - 1; i++) {
                x = x + dx[2];
                y = y + dy[2];

                if (valid(board, x, y) && board[x][y] == c) {
                    count++;
                }
            }

            x = row;
            y = col;

            for (int i = 0; i < n - 1; i++) {
                x = x + dx[3];
                y = y + dy[3];

                if (valid(board, x, y) && board[x][y] == c) {
                    count++;
                }
            }

            if (count == n - 1) {
                return player;
            }

            return 0;
    }
    
    private boolean valid(char[][] board, int i, int j) {
        return i >= 0 && i < board.length && j >= 0 && j < board[0].length;
    }
}

