    func sortList(_ head: ListNode?) -> ListNode? {
    guard let node = head, head?.next != nil else { return head }
    
    var slow: ListNode? = head
    var fast: ListNode? = head
    
    while let _ = fast?.next?.next {
        fast = fast?.next?.next
        slow = slow?.next
    }
    
    let mid = slow?.next
    slow?.next = nil
    
    let left = sortList(head)
    let right = sortList(mid)
    
    return merge(left, right)
}

private func merge(_ n1: ListNode?, _ n2: ListNode?) -> ListNode? {
    if n1 == nil {
        return n2
    } else if n2 == nil {
        return n1
    }
    
    var n1 = n1, n2 = n2
    let dummy = ListNode(0)
    var node = dummy
    
    while n1 != nil, n2 != nil {
        if n1!.val < n2!.val {
            node.next = n1
            n1 = n1?.next
        } else {
            node.next = n2
            n2 = n2?.next
        }
        
        node = node.next!
    }
    
    if n1 != nil {
        node.next = n1
    } else if n2 != nil {
        node.next = n2
    }
    
    return dummy.next
}
