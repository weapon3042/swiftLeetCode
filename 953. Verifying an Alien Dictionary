    public class AlienComparator implements Comparator<String> {
    
        Map<Character, Integer> map;

        public AlienComparator(String order) {
            char[] chars = order.toCharArray();
            map = new HashMap<>();
            
            for (int i=0; i< chars.length; i++) {
                map.put(chars[i], Integer.valueOf(i));
            }
        }
        
        public int compare(String s1, String s2) {
            
            int i = 0;
            int j = 0;
            
            while (i < s1.length() && j < s2.length()) {
                char c1 = s1.charAt(i);
                char c2 = s2.charAt(j);
                
                if (c1 == c2) {
                    i++;
                    j++;
                    continue;
                }
                
                if (map.containsKey(c1) && !map.containsKey(c2)) {
                    return 1;
                } else if (!map.containsKey(c1) && map.containsKey(c2)) {
                    return -1;
                } else if (!map.containsKey(c1) && !map.containsKey(c2)) {
                    i++;
                    j++;
                } else {
                    return map.get(c1) - map.get(c2);
                }
            }
            
            while (i < s1.length()) {
                if (map.containsKey(s1.charAt(i))) {
                    return -1;
                  }
            }
            
            while (j < s2.length()) {
                if (map.containsKey(s2.charAt(j))) {
                    return -1;
                  }
            }
            
            return 0;            
        }
    }
    
    public boolean isAlienSorted(String[] words, String order) {
        if (words == null || order == null) {
            return true;
        }
        
        String[] ori = Arrays.copyOf(words,words.length);
        
        Arrays.sort(words, new AlienComparator(order));
        
        for (int i=0; i<words.length; i++) {
            if (!words[i].equals(ori[i])) {
                return false;
            }
                
        }
        
        return true;
        
    }

