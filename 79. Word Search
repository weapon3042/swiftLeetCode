    func exist(_ board: [[Character]], _ word: String) -> Bool {
        guard board.count > 0, board[0].count > 0, word.count > 0 else { return false }
        
        let m = board.count
        let n = board[0].count
        let chars = Array(word)
        var visit = [[Bool]](repeating: [Bool](repeating: false, count: n), count: m)
        
        for i in 0..<m {
            for j in 0..<n where board[i][j] == chars.first! {
                if dfs(board, i, j, &visit, chars, 0) { return true}
            }
        }
        
        return false
    }
    
    let dx = [-1,1, 0, 0]
    let dy = [0, 0, -1, 1]
    
    private func dfs(_ board: [[Character]], _ i: Int, _ j: Int, _ visit: inout [[Bool]], _ chars: [Character], _ index: Int) -> Bool {
    if index == chars.count - 1 {
        return true
    }
    
    visit[i][j] = true
    
    for k in 0..<4 {
        let x = i + dx[k]
        let y = j + dy[k]
        
        if valid(board, x, y) && !visit[x][y] && board[x][y] == chars[index+1] {
                if dfs(board, x, y, &visit, chars, index+1) { return true }
        }
    }
    
    visit[i][j] = false
    
    return false
}

func valid(_ board: [[Character]], _ i: Int, _ j: Int) -> Bool {
    return i >= 0 && i < board.count && j >= 0 && j < board[0].count
}
