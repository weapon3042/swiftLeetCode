func longestConsecutive(_ root: TreeNode?) -> Int {
    guard let node = root else { return 0 }
    
    var res = 1
    dfs(node, &res, 1)
    
    return res
}

private func dfs(_ root: TreeNode?, _ res: inout Int, _ cur: Int) {
    guard let node = root else {
        return
    }
    
    if let left = node.left {
        if left.val == node.val + 1 {
            if cur + 1 > res {
                res = cur + 1
            }
            dfs(left, &res, cur + 1)
        } else {
            dfs(left, &res, 1)
        }
    }
    
    if let right = node.right {
        if right.val == node.val + 1 {
            if cur + 1 > res {
                res = cur + 1
            }
            dfs(right, &res, cur + 1)
        } else {
            dfs(right, &res, 1)
        }
    }

}
