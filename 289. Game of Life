    func gameOfLife(_ board: inout [[Int]]) {
        guard board.count > 0, board[0].count > 0 else { return }
        
        
        let m = board.count
        let n = board[0].count
        let dx = [-1, 1, 0, 0, -1, 1, -1, 1]
        let dy = [0, 0, -1, 1, -1, 1, 1, -1]
        
        for i in 0..<m {
            for j in 0..<n {
                
                var count = 0
                
                for k in 0..<8 {
                    let x = i + dx[k]
                    let y = j + dy[k]
                    
                    if !isValid(board, x, y) { continue }
                    
                    if board[x][y] == 1 || board[x][y] == 2 {
                        count += 1
                    }
                }
                
                if board[i][j] == 1, count < 2 {
                    board[i][j] = 2
                } else if board[i][j] == 1, count > 3 {
                    board[i][j] = 2
                } else if board[i][j] == 0, count == 3 {
                    board[i][j] = 3
                }
            }
        }
        
        
        for i in 0..<m {
            for j in 0..<n {
                board[i][j] %= 2
            }
        }
    }
    
    private func isValid(_ board: [[Int]], _ i: Int, _ j: Int) -> Bool {
        return i >= 0 && i < board.count && j >= 0 && j < board[0].count
    }

