public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        if (root == null) {
            return "{}";
        }
        
        
        StringBuilder sb = new StringBuilder();
        
        List<TreeNode> queue = new ArrayList<>();
        queue.add(root);
                
        for(int i=0; i< queue.size(); i++) { 
            TreeNode curr = queue.get(i);
            
            if (curr == null) {
                continue;
            }
            
            queue.add(curr.left);
            queue.add(curr.right);
        }
        
        while (queue.get(queue.size() - 1) == null) {
            queue.remove(queue.size() - 1);
        }
        
        sb.append("{");
        
        sb.append(String.valueOf(queue.get(0).val));
        
        for (int i=1; i<queue.size(); i++) {
            TreeNode node = queue.get(i);
            
            if (node == null) {
                sb.append(",#");
            } else {
                sb.append(",");
                sb.append(node.val);
            }
        }
        
        sb.append("}");
        return sb.toString();
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if (data.equals("{}")) {
            return null;
        }
        
        String[] strs = data.substring(1, data.length()-1).split(",");
        
        int index = 0;
        boolean isLeft = true;
        List<TreeNode> queue = new ArrayList<>();
        queue.add(new TreeNode(Integer.parseInt(strs[0])));
        
        for (int i=1; i<strs.length; i++) {
            
            if (!strs[i].equals("#")) {
            TreeNode curr = new TreeNode(Integer.parseInt(strs[i]));
            
            if (isLeft) {
                queue.get(index).left = curr;
            } else {
                queue.get(index).right = curr;
            }
                queue.add(curr);

            }
            
            if (!isLeft) {
                index++;
            }
            
            isLeft = !isLeft;
        }
        
        return queue.get(0);
        
    }
}

