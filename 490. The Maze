    func hasPath(_ maze: [[Int]], _ start: [Int], _ destination: [Int]) -> Bool {
        guard maze.count > 0, maze[0].count > 0 else { return false }
        
        var visit = [[Bool]](repeating: [Bool](repeating: false, count: maze[0].count), count: maze.count)
        
        return dfs(maze, (start[0], start[1]), (destination[0], destination[1]), &visit) 
    }
        
    let dx = [-1, 1, 0, 0]
    let dy = [0, 0, -1, 1]
    
    private func dfs(_ maze: [[Int]], _ start: (Int, Int), _ end: (Int, Int), _ visit: inout [[Bool]]) -> Bool {
        if start.0 == end.0, start.1 == end.1 { return true }
        
        visit[start.0][start.1] = true
        
        for k in 0..<4 {
            var i = start.0
            var j = start.1
            
            while valid(maze, (i + dx[k], j + dy[k])), maze[i+dx[k]][j+dy[k]] != 1 {
                i += dx[k]
                j += dy[k]
            }
            
            if visit[i][j] == false {
                if dfs(maze, (i, j), end, &visit) { return true }
            }
            
        }
        
        return false
    }
    
    private func valid(_ maze: [[Int]], _ p: (Int, Int)) -> Bool {
        return p.0 >= 0 && p.0 < maze.count && p.1 >= 0 && p.1 < maze[0].count
    }
