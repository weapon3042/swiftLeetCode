    int[] deltaX = new int[] {0, 0, -1, 1};
    int[] deltaY = new int[] {1, -1, 0, 0};
    
    public boolean hasPath(int[][] maze, int[] start, int[] destination) {
        if(maze == null || maze.length == 0 || maze[0].length == 0 || start == null || start.length == 0 || destination == null || destination.length == 0){
            return false;
        }
        
        Queue<int[]> queue = new LinkedList<>();
        boolean[][] visited = new boolean[maze.length][maze[0].length];
        queue.offer(start);
        visited[start[0]][start[1]] = true;
        
        while(!queue.isEmpty()){
            int[] curPoint = queue.poll();
            int x = curPoint[0], y = curPoint[1];
            for(int j = 0; j < 4; j++){
                int xx = x;
                int yy = y;
                
                while(isValid(xx + deltaX[j], yy + deltaY[j], maze)){
                    xx += deltaX[j];
                    yy += deltaY[j];
                }
                if(xx == destination[0] && yy == destination[1]){
                    return true;
                }
                if(!visited[xx][yy]){
                    queue.offer(new int[]{xx, yy});
                    visited[xx][yy] = true;
                }
            }
        }
        return false;
    }
    
    private boolean isValid(int x, int y, int[][] maze){
        return x >= 0 && x < maze.length && y >= 0 && y < maze[0].length && maze[x][y] == 0;
    }

