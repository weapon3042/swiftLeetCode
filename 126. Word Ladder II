    public List<List<String>> findLadders(String beginWord, String endWord, List<String> wordList) {
        List<List<String>> ladders = new ArrayList<List<String>>();
        Map<String, List<String>> map = new HashMap<>();
        Map<String, Integer> distance = new HashMap<>();
        
        Set<String> dict = new HashSet<>();
        dict.addAll(wordList);
        
        if (!dict.contains(endWord)) { return ladders; }

        dict.add(beginWord);
        
        bfs(map, distance, beginWord, endWord, dict);
        
        List<String> path = new ArrayList<>();
        
        dfs(ladders, path, endWord, beginWord, distance, map);
        
        return ladders;
    }
    
    void bfs(Map<String, List<String>> map, Map<String, Integer> distance, String start, String end, Set<String> dict) {
        Queue<String> queue = new LinkedList<>();
        queue.offer(start);
        distance.put(start, 0);
        
        for (String s: dict) {
            map.put(s, new ArrayList<String>());
        }
        
        while (!queue.isEmpty()) {
            String curr = queue.poll();
            
            List<String> nextList = expand(curr, dict);
            
            for (String next : nextList) {
                map.get(next).add(curr);
                
                if (!distance.containsKey(next)) {
                    distance.put(next, distance.get(curr) + 1);
                    queue.offer(next);
                }
            }
        }
        
    }
    
    List<String> expand(String curr, Set<String> dict) {
        List<String> expansion = new ArrayList<String>();
        
        for (int i=0; i<curr.length(); i++) {
            for (char c='a'; c<='z'; c++) {
                if (c != curr.charAt(i)) {
                    String expanded = curr.substring(0,i) + c + curr.substring(i+1);
                    if (dict.contains(expanded)) {
                        expansion.add(expanded);
                    }
                }
                
            }
        }
        
        return expansion;
    }
    
    void dfs(List<List<String>> ladders, List<String> path, String curr, String start, Map<String, Integer> distance, Map<String, List<String>> map) {
        path.add(curr);
        if (curr.equals(start)) {
            Collections.reverse(path);
            ladders.add(new ArrayList<String>(path));
            Collections.reverse(path);
        } else {
            for (String s : map.get(curr)) {
                if (distance.containsKey(s) && distance.get(s) + 1 == distance.get(curr)) {
                    dfs(ladders, path, s, start, distance, map);
                }
            }
        }
        
        
        path.remove(path.size()-1);
    }
