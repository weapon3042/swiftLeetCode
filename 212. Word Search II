class TrieNode {
    var children = [Character: TrieNode]()
    var hasWord = false
    var c: Character?
    var s: String!
    init() { }
    
    init(_ c: Character) {
        self.c = c
        self.s = ""
    }
}

class Trie {
    var root = TrieNode()
    
    func add(_ word: String) {
        var cur = root, chars = Array(word)
        
        for i in 0..<chars.count {
            if cur.children[chars[i]]  == nil{
                cur.children[chars[i]] = TrieNode()
            }
            cur = cur.children[chars[i]]!
        }
        cur.hasWord = true
        cur.s = word
    }
    
    func search(_ word: String) -> Bool {
        var cur = root, chars = Array(word)
        
        for i in 0..<chars.count {
            if let node = cur.children[chars[i]] {
                cur = node
            } else {
                return false
            }
        }
        
        return cur.hasWord
    }
    
    func startWith(_ word: String) -> Bool {
        var cur = root, chars = Array(word)
        
        for i in 0..<chars.count {
            if let node = cur.children[chars[i]] {
                cur = node
            } else {
                return false
            }
        }
        
        return true
    }
}
    
    let dx = [-1, 1, 0, 0]
    let dy = [0, 0, -1, 1]
    
    func findWords(_ board: [[Character]], _ words: [String]) -> [String] {
        guard board.count > 0, board[0].count > 0, words.count > 0 else { return [String]() }
        
        let m = board.count
        let n = board[0].count
        var visit = [[Bool]](repeating: [Bool](repeating: false, count: n), count: m)
        var res = [String]()
        let trie = Trie()
        
        for w in words {
            trie.add(w)
        }
        
        for i in 0..<m {
            for j in 0..<n {
                
            dfs(board, i, j, &visit, &res, trie.root)
            }
        }
        
        return res
    }
    
    private func dfs(_ board: [[Character]], _ i: Int, _ j: Int, _ visit: inout [[Bool]], _ res: inout [String], _ node: TrieNode) {
        
        if node.hasWord, !res.contains(node.s) {
            res.append(node.s)
        }
        
        guard valid(board, i, j), !visit[i][j] else { return }
                
        let char = board[i][j]
        if let child = node.children[char] {
            visit[i][j] = true
            for k in 0..<4 {
                let x = i + dx[k]
                let y = j + dy[k]
                dfs(board, x, y, &visit, &res, child)
            }
            
            visit[i][j] = false
        }        
    }
    
    private func valid(_ board:[[Character]], _ i: Int, _ j: Int) -> Bool {
        return i >= 0 && i < board.count && j >= 0 && j < board[0].count
    }
