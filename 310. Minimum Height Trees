    public List<Integer> findMinHeightTrees(int n, int[][] edges) {
        List<Integer> res = new ArrayList<>();
        if(n == 1){
            res.add(0);
            return res;
        }
        
        List<List<Integer>> graph = new ArrayList<>();
        int[] indegree = new int[n];
        for(int i = 0; i < n; i++){
            graph.add(new ArrayList<>());
        }
        
        for(int[] edge : edges){
            graph.get(edge[0]).add(edge[1]);
            graph.get(edge[1]).add(edge[0]);
            indegree[edge[0]]++;
            indegree[edge[1]]++;
        }
        
        Queue<Integer> queue = new LinkedList<>();
        for(int i = 0; i < n; i++){
            if(graph.get(i).size() == 1){
                queue.offer(i);
            }
        }
        
        while(!queue.isEmpty()){
            res = new ArrayList<>();
            int size = queue.size();
            for(int i = 0; i < size; i++){
                int leaf = queue.poll();
                res.add(leaf);
                for(int j = 0; j < graph.get(leaf).size(); j++){
                    int parent = graph.get(leaf).get(j);
                    indegree[parent]--;
                    if(indegree[parent] == 1){
                        queue.offer(parent);
                    }
                }
            }
        }
        return res;
    }

