func perviousPermutation(_ nums: [Int]) -> [Int] {
    guard nums.count > 0  else {
        return nums
    }
    
    var nums = nums
    var i = nums.count - 1
    
    while i > 0, nums[i] >= nums[i-1] {
        i -= 1
    }
    
    swapList(&nums, i, nums.count - 1)
    
    if i > 0 {
        var j = i
        
        while nums[j] >= nums[i-1] {
            j += 1
        }
        
        nums.swapAt(j, i-1)
    }
    
    return nums
}

private func swapList(_ nums: inout [Int], _ i: Int, _ j: Int) {
    var i = i
    var j = j
    
    while i < j {
        nums.swapAt(i, j)
        i += 1
        j -= 1
    }
}
